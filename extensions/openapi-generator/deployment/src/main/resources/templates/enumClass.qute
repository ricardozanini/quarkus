{#if e.withXml}
    @XmlType(name="{e.datatypeWithEnum}")
    @XmlEnum({e.dataType}.class)
{#else}
    @JsonbTypeSerializer({e.datatypeWithEnum}.Serializer.class)
    @JsonbTypeDeserializer({e.datatypeWithEnum}.Deserializer.class)
{/if}

    {#include additionalEnumTypeAnnotations.qute e=e /}public enum {e.datatypeWithEnum} {
        {#if e.allowableValues}
        {#if e.withXml}
        {#for v in e.enumVars}@XmlEnumValue({#if v.isInteger || v.isDouble || v.isLong || v.isFloat}"{/}{v.value}{#if v.isInteger || v.isDouble || v.isLong || v.isFloat}"{/}) {v.name}({v.dataType}.valueOf({v.value})){#if hasNext}, {#else}; {/if}{/for}
        {#else}
        {#for v in e.enumVars}{v.name}({v.dataType}.valueOf({v.value})){#if hasNext}, {#else};{/if}{/for}
        {/if}
        {/if}

        {e.dataType} value;

        {e.datatypeWithEnum} ({e.dataType} v) {
            value = v;
        }

        public {e.dataType} value() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        {#if e.withXml}
        public static {e.datatypeWithEnum} fromValue(String, v) {
            for ({#for dataType in e.datatypeWithEnum}{dataType}{/for}{#insert e.datatypeWithEnum}{e.classname}{/} b : {#for dataType in e.datatypeWithEnum}{dataType}{/for}{#insert e.datatypeWithEnum}{e.classname}{/}.values()) {
                if (String.valueOf(b.value).equals(v)) {
                    return b;
                }
            }
            {#if e.useNullForUnknownEnumValue}return null;{#else}throw new IllegalArgumentException("Unexpected value '" + v + "'");{/if}
        }
        {#else}
        public static final class Deserializer implements JsonbDeserializer<{e.datatypeWithEnum}> {
        @Override
        public {e.datatypeWithEnum} deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
            for ({#for dataType in e.datatypeWithEnum}{dataType}{/for}{#insert e.datatypeWithEnum}{e.classname}{/} b : {#for dataType in e.datatypeWithEnum}{dataType}{/for}{#insert e.datatypeWithEnum}{e.classname}{/}.values()) {
                if (String.valueOf(b.value).equals(parser.getString())) {
                    return b;
                }
            }
            {#if e.useNullForUnknownEnumValue}return null;{#else}throw new IllegalArgumentException("Unexpected value '" + parser.getString() + "'");{/if}
        }

        public static final class Serializer implements JsonbSerializer<{e.datatypeWithEnum}> {
            @Override
            public void serialize({e.datatypeWithEnum} obj, JsonGenerator generator, SerializationContext ctx) {
                generator.write(obj.value);
            }
        }
        {/if}
    }
